#!/bin/bash
COMPOSER=$(which composer.phar || which composer)
VENDOR=$($COMPOSER config vendor-dir)
SCRIPTDIR="$VENDOR/mediact/testing-suite/bin/"
if [ ! -d "$SCRIPTDIR" ]
then
  SCRIPTDIR=$(dirname "${BASH_SOURCE[0]}")
fi
BIN=$($COMPOSER config bin-dir)

echo 'The use of this file is deprecated, please run: "grumphp run".'
$BIN/grumphp run

## Run unit tests.
#cat $SCRIPTDIR/phpunitheader.txt
#test ! -f phpunit.xml \
#|| test ! -x $BIN/phpunit \
#|| $BIN/phpunit \
#  --fail-on-warning \
#  --disallow-test-output || exit $?
#
## Require the coding standards, if they are not explicitly defined.
#test -d $VENDOR/mediact/coding-standard \
#|| $COMPOSER require mediact/coding-standard \
#  --dev \
#  --prefer-dist \
#  --no-scripts \
#  --ignore-platform-reqs \
#  --no-progress \
#  --optimize-autoloader \
#  --no-interaction || exit $?
#
## Run static code analysis.
#for directory in src tests
#do
#    if [ -d $directory ]
#    then
#        cat $SCRIPTDIR/phpcsheader.txt
#        test -f phpcs.xml && $BIN/phpcs $directory || exit $?
#
#        cat $SCRIPTDIR/phpmdheader.txt
#        # PHPMDs exit codes don't seem to work, so piping stdout to stderr, then
#        # counting the number of warnings and then outputting stderr back to stdout.
#        test -f phpmd.xml && $BIN/phpmd $directory text phpmd.xml | \
#            tee /dev/stderr | wc -l 2> /dev/stdout | (read ps; exit $ps) || exit $?
#
#        cat $SCRIPTDIR/phpstanheader.txt
#        $BIN/phpstan analyse $directory --level 4 --no-progress || exit $?
#    fi
#done
